plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

ext {
    composeVersion = '1.3.1'

    FIELD_API_KEY = "FAVQS_API_KEY"
    propetiesPath = "${project.rootDir}/local.properties"
    Properties properties = loadProperties(propetiesPath)
    API_KEY = getProperty(FIELD_API_KEY, properties, propetiesPath)
    if (API_KEY == null || API_KEY == "") throw new GradleException("YOU NEED API_KEY IN local.properties API_KEY=\"yourkeyhere\" ")
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.kkalfas.quoty"
        minSdk 26
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }

        // UNSAFE STILL CAN BE FOUND WHEN REVERSE ENGINEERING BUT
        // THE SAFEST WAY IS PUTTING KEYS IN C MODULE BUT THIS IS NOT IN THE SCOPE
        // AT LEAST THE KEY IS NOT IN REPOSITORY HE HE HE
        buildConfigField 'String', 'API_KEY', API_KEY
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion composeVersion
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Compose
    implementation "androidx.compose.ui:ui:$composeVersion"
    implementation "androidx.compose.ui:ui-tooling:$composeVersion"
    implementation "androidx.compose.ui:ui-tooling-preview:$composeVersion"
    implementation "androidx.compose.foundation:foundation:$composeVersion"
    implementation "androidx.compose.material:material:$composeVersion"
    implementation "androidx.compose.animation:animation:$composeVersion"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'

    // Navigation
    var navVersion = "2.5.3"
    implementation "androidx.navigation:navigation-compose:$navVersion"

    // Paging 3
    implementation "androidx.paging:paging-compose:1.0.0-alpha17"

    // AndroidX
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.activity:activity-compose:1.6.1'
    var securityVersion = "1.0.0"
    implementation "androidx.security:security-crypto:$securityVersion"

    // Material 2
    implementation 'com.google.android.material:material:1.7.0'

    // Accompanist
    var accompanistVersion = "0.25.0"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanistVersion"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // HttpClient - Ktor
    var ktorVersion = "2.1.3"
    implementation "io.ktor:ktor-client-core:$ktorVersion"
    implementation "io.ktor:ktor-client-android:$ktorVersion"
    implementation "io.ktor:ktor-client-content-negotiation:$ktorVersion"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"
    implementation "io.ktor:ktor-client-logging:$ktorVersion"

    // Coil
    implementation "io.coil-kt:coil-compose:2.2.2"

    // TEST Ktor mock engine
    testImplementation "io.ktor:ktor-client-mock:$ktorVersion"

    // TEST Junit
    testImplementation 'junit:junit:4.13.2'

    // TEST Mockk
    var mockkVersion = "1.12.4"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testImplementation "io.mockk:mockk-agent-jvm:${mockkVersion}"

    // TEST assertJ
    testImplementation "org.assertj:assertj-core:3.11.1"
}

kapt {
    correctErrorTypes = true
}

//Helper functions
String getProperty(propertyName, properties, propertyPath) {

    println("getProperty name: ${propertyName} from path: ${propertyPath}")

    if (properties.getProperty(propertyName) != null) {
        return properties.getProperty(propertyName)
    } else {
        throw new InvalidUserDataException(propertyKeyNotDefined(propertyName, propertyPath))
    }
}

Properties loadProperties(path) {
    println("loadProperties from path: ${path}")

    Properties properties = new Properties()
    try {
        new File(path).withInputStream { instr ->
            properties.load(instr)
        }
    } catch (ex) {
        ex.printStackTrace()
        showConsoleError("NO PROPERTIES HAVE BEEN FOUND ON PATH: ${path}\"\nPLEASE MAKE SURE BUILD CONFIG RELEASE FOLDER HAS BEEN ADDED\n${properties}")
    }

    return properties
}
